#!/usr/bin/env bash

# Please Use Google Shell Style: https://google.github.io/styleguide/shell.xml

# ---- Start unofficial bash strict mode boilerplate
# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -o errexit  # always exit on error
set -o errtrace # trap errors in functions as well
set -o pipefail # don't ignore exit codes when piping output
set -o posix    # more strict failures in subshells
# set -x          # enable debugging

IFS="$(printf "\n\t")"
# ---- End unofficial bash strict mode boilerplate

__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
env_source_param="$1"
env_output_param="$2"
env_output="${env_output_param:="${__dir}/../.env"}"
env_source="${env_source_param:="${__dir}/../.env.example"}"

function info {
  echo "$@" >&2
}

function help() {
  info "setup [input output [force]]"
  info ""
  info "Copies all environment variables from input to output. If force is 'force' then existing values will be overwritten."
  info ""
}

function main() {
  set -e

  add_new_env_vars
}

function add_new_env_vars() {
  info "Copying env from ${env_source} to ${env_output}"
  # create .env and set perms if it does not exist
  [[ ! -f "${env_output}" ]] && {
    touch "${env_output}"
    chmod 0600 "${env_output}"
  }

  grep -Ehv '^\s*#' "${env_source}" |
    {
      while IFS= read -r var; do
        if [[ -z "${var}" ]]; then
          continue
        fi
        key="${var%%=*}"        # get var key
        var=$(eval echo "$var") # generate dynamic values

        # If .env doesn't contain this env key, add it
        if ! grep -qLE "^$key=" "${env_output}"; then
          info "Adding $key to ${env_output}"
          echo "$var" >>"${env_output}"
        fi
      done
    }
}

main
